@using Pages.ViewModels
@using DamnTv.Frontend.Client.Widgets.Views
@using DamnTv.Frontend.Client.Widgets.Models
@using DamnTv.Frontend.Client.Shared.Views
@using DamnTv.Frontend.Client.Features.Views
@using DamnTv.Frontend.Client.Pages.Models

@page "/sharing/{Id:int}"
@inject ISharingViewModel ViewModel
@inject PersistentComponentState ApplicationState
@implements IDisposable
@inject ILogger<Sharing> Logger

@if (ViewModel.MessengerMetaHeaders != null)
{
<MessengerMetaHeaders ViewModel="@ViewModel.MessengerMetaHeaders" />
}


<div InteractiveServerRenderMode class="page lime-background">
    <PhantomHeader/>
    @if (ViewModel.IsInitialized)
    {
        @if (ViewModel.IsNotFound)
        {
            <CenteringWrapper>
                <NotFound404 Message="@ViewModel.NotFoundMessage"/>
            </CenteringWrapper>
        }
        else
        {
            <WidthWrapper>
                <SharingWidget ViewModel="@(ViewModel.SharingWidget)"/>
            </WidthWrapper>
        }
    }

</div>

@code {
    [Parameter]
    public int Id { get; init; }
    [Parameter]
    [SupplyParameterFromQuery(Name="time-start")]
    public long? TimeStart { get; init; }
    [Parameter]
    [SupplyParameterFromQuery(Name="time-zone")]
    public float? TimeZone { get; init; }
    [Parameter]
    [SupplyParameterFromQuery(Name="limit")]
    public int? Limit { get; init; }

    private PersistingComponentStateSubscription persistingSubscription;
    private readonly string persistingStateKey = $"{nameof(SharingPersistingState)}";
    private SharingPersistingState? _persistingState = null;

    
    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistStateAsync);
   
        SharingParameters parameters = new(Id, Limit, TimeStart, TimeZone);

        if (ApplicationState
            .TryTakeFromJson<SharingPersistingState>(
                persistingStateKey,
                out SharingPersistingState? persistingState)
        ){   
            await ViewModel.InitializeAsync(parameters, persistingState!);
        }
        else
        {
            _persistingState = await ViewModel.InitializeAsync(parameters);
        }

        await base.OnInitializedAsync();
    }

    private Task PersistStateAsync()
    {
        if (_persistingState != null)
            ApplicationState.PersistAsJson(persistingStateKey, _persistingState);
        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();   
    }
}
